{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,QAE9BC,EAAiB,GAgCvB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAvCbN,EAAKc,iBAAiB,UAEtB,SAAqBC,GACnBA,EAAMC,iBACN,MACEC,UAAUX,MAAEA,EAAKY,KAAEA,EAAIC,OAAEA,IACvBJ,EAAMK,eAKZ,SAAsBd,EAAOY,EAAMC,GACjChB,EAAeG,MAAQe,OAAOf,EAAMgB,OACpCnB,EAAee,KAAOG,OAAOH,EAAKI,OAClCnB,EAAegB,OAASE,OAAOF,EAAOG,M,EAPtCC,CAAajB,EAAOY,EAAMC,GAU5B,WACE,IAAK,IAAIK,EAAI,EAAGA,GAAKrB,EAAegB,OAAQK,GAAK,EAC/CpB,EAAcoB,EAAGrB,EAAeG,OAC7BmB,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBR,EAAA4B,OAAOC,QAAQ,qBAAqBtB,QAAeC,MAAU,IAE9DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBR,EAAA4B,OAAOG,QAAQ,oBAAoBxB,QAAeC,MAAU,IAEhEH,EAAeG,OAASH,EAAee,I,CAlBzCY,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\n\nconst inputValueForm = {};\n\nform.addEventListener('submit', onFormSumit);\n\nfunction onFormSumit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  getValueForm(delay, step, amount);\n  promisesFunction();\n}\n\nfunction getValueForm(delay, step, amount) {\n  inputValueForm.delay = Number(delay.value);\n  inputValueForm.step = Number(step.value);\n  inputValueForm.amount = Number(amount.value);\n}\n\nfunction promisesFunction() {\n  for (let i = 1; i <= inputValueForm.amount; i += 1) {\n    createPromise(i, inputValueForm.delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    inputValueForm.delay += inputValueForm.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputValueForm","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","elements","step","amount","currentTarget","Number","value","$47d4ff9957288465$var$getValueForm","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$promisesFunction"],"version":3,"file":"03-promises.a948e433.js.map"}