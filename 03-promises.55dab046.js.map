{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAE9BC,EAAiB,GAgCvB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCPN,EAAKc,iBAAiB,UAEtB,SAAqBC,GACnBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYb,EAAKW,EAALX,MAAOc,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,QAM7B,SAAsBf,EAAOc,EAAMC,GACjClB,EAAeG,MAAQgB,OAAOhB,EAAMiB,OACpCpB,EAAeiB,KAAOE,OAAOF,EAAKG,OAClCpB,EAAekB,OAASC,OAAOD,EAAOE,M,EAPtCC,CAAalB,EAAOc,EAAMC,GAU5B,WACE,IAAK,IAAII,EAAI,EAAGA,GAAKtB,EAAekB,OAAQI,GAAK,EAC/CrB,EAAcqB,EAAGtB,EAAeG,OAC7BoB,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBR,EAAA8B,OAAOC,QAAQ,qBAAoCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE1DyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBR,EAAA8B,OAAOI,QAAQ,oBAAmCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE5DH,EAAeG,OAASH,EAAeiB,I,CAlBzCa,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\n\nconst inputValueForm = {};\n\nform.addEventListener('submit', onFormSumit);\n\nfunction onFormSumit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  getValueForm(delay, step, amount);\n  promisesFunction();\n}\n\nfunction getValueForm(delay, step, amount) {\n  inputValueForm.delay = Number(delay.value);\n  inputValueForm.step = Number(step.value);\n  inputValueForm.amount = Number(amount.value);\n}\n\nfunction promisesFunction() {\n  for (let i = 1; i <= inputValueForm.amount; i += 1) {\n    createPromise(i, inputValueForm.delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    inputValueForm.delay += inputValueForm.step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputValueForm","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","Number","value","$ce04d3a99e08e73b$var$getValueForm","i","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$promisesFunction"],"version":3,"file":"03-promises.55dab046.js.map"}